/* Resets browsers' default styles and provides utility classes */
@import 'tailwindcss';
@import url('./assets/fonts/Quicksand/Quicksand-VariableFont_wght.ttf');

@theme {
    /* Tailwind will create the new theme variable "--font-quicksand" 
    and utility class called "font-quicksand" for us. */
    --font-quicksand: 'Quicksand', serif;

    --animate-wavey: wavey 1s linear infinite;

    @keyframes wavey {
        0%,
        100% {
            transform: scaleY(0.5);
        }

        50% {
            transform: scaleY(1.5);
        }
    }

    /* Variables for specifying animation delays */
    --animation-delay-sm: 100ms;
    --animation-delay-md: 500ms;
    --animation-delay-lg: 1000ms;
}

/* This is a completely customized utility class
that doesn't come with Tailwind. */
@utility animation-delay-* {
    /* Caters for animation-delay-sm -md -lg etc. */
    animation-delay: --value(--animation-delay- *);

    /* Allows you to specify .animation-delay-[<delay>] */
    /* The asterisk means accepting any types of data. */
    /* animation-delay: --value([ *]); */

    /* Newer way of specifying .animation-delay-[<delay>] classes available in V4. */
    animation-delay: calc(--value(integer) * 1ms);
}

@layer base {
    body {
        font-family: var(--font-quicksand);
    }

    h1 {
        @apply text-6xl font-bold;
    }
    h2 {
        @apply text-5xl font-bold;
    }
    h3 {
        @apply text-4xl font-bold;
    }
    h4 {
        @apply text-3xl font-bold;
    }
    h5 {
        @apply text-2xl font-bold;
    }
    h6 {
        @apply text-xl font-bold;
    }
}

@layer components {
    /* Creating too many Tailwind components will increase bundle size.
    You should prefer React components over Tailwind components. */
    .menu-item {
        @apply relative h-full flex items-center p-4 cursor-pointer font-bold text-xl text-pink-200 hover:text-zinc-200 hover:bg-white/10 transition-colors ease-in-out;
    }
}

/* Tailwind will create a .group-open class. */
@custom-variant group-open {
    /* This custom variant can be applied to any descendants of .group elements.
    .group-open:<utility class> will be applied when .group elements also have
    .open class applied, use 'open' attribute, or are in :popover-open or :open state.
    */
    &:is(:where(.group):is(.open, [open], :popover-open, :open) *) {
        /* With this directive, you can use .group-open:<utility class> */
        @slot;
    }
}

@custom-variant peer-open {
    &:is(:where(.peer):is(.open, [open], :popover-open, :open) ~ *) {
        @slot;
    }
}

/* Allows for manual toggle between dark and light modes. */
@custom-variant dark (&:where(.dark, .dark *));

/* Customize .container class to implement a fixed-width container
 depending on screen size, minimizing fluid layout and increasing predictability. */
.container {
    width: 100%;
    @media (width >= 40rem /* 640px */) {
        max-width: 40rem /* 640px */;
    }
    @media (width >= 48rem /* 768px */) {
        max-width: 48rem /* 768px */;
    }
    @media (width >= 64rem /* 1024px */) {
        max-width: 64rem /* 1024px */;
    }
    @media (width >= 80rem /* 1280px */) {
        max-width: 80rem /* 1280px */;
    }
    @media (width >= 96rem /* 1536px */) {
        max-width: 96rem /* 1536px */;
    }
}
